This challenge was "flag leak" on picoCTF: https://play.picoctf.org/practice/challenge/269?category=6&difficulty=2&page=2

This challenge gave the source code for the program, and allowed the user to use netcat to connect to the remote server to run the program. It's intended use was to just echo back whatever the first word was of the user input. On inspecting the source code, the program seemed to open (in read mode) the flag file before asking for a prompt, and load it into a locally declared variable. This meant the string variable containing the flag is contained somewhere on the stack.

Thankfully, these lines of code are used when handling I/O:

---------------------------------------------------------------------
   scanf("%127s", story);
   printf("Here's a story - \n");
   printf(story);
---------------------------------------------------------------------

Specifically the line "printf(story)" allows the user to use string format vulnerabilities to expose stack variables. By using inputs with the format "%N$s", where N is some number on the stack, the "story" that was returned by the program would contain the string representation of whatever variable is at position N on the stack.

After lots of brute forcing, I found that the correct stack position was 24, and used the input "%24$s" to expose the flag:

---------------------------------------------------------------------
~ % nc saturn.picoctf.net 56361
Tell me a story and then I'll tell you one >> %24$s
Here's a story - 
*not including the flag!!*
---------------------------------------------------------------------

